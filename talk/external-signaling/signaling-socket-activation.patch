diff --git a/src/server/main.go b/src/server/main.go
index df7791c..3acec72 100644
--- a/src/server/main.go
+++ b/src/server/main.go
@@ -33,7 +33,6 @@ import (
 	"os/signal"
 	"runtime"
 	runtimepprof "runtime/pprof"
-	"strings"
 	"syscall"
 	"time"
 
@@ -43,6 +42,8 @@ import (
 	"github.com/nats-io/go-nats"
 
 	"signaling"
+
+	"github.com/coreos/go-systemd/activation"
 )
 
 var (
@@ -148,8 +149,10 @@ func main() {
 		log.Fatal("Could not create NATS client: ", err)
 	}
 
-	r := mux.NewRouter()
-	hub, err := signaling.NewHub(config, nats, r, version)
+	externalRouter := mux.NewRouter()
+	internalRouter := mux.NewRouter()
+
+	hub, err := signaling.NewHub(config, nats, externalRouter, version)
 	if err != nil {
 		log.Fatal("Could not create hub: ", err)
 	}
@@ -235,87 +238,60 @@ func main() {
 	if err != nil {
 		log.Fatal("Could not create backend server: ", err)
 	}
-	if err := server.Start(r); err != nil {
+	if err := server.Start(internalRouter); err != nil {
 		log.Fatal("Could not start backend server: ", err)
 	}
 
 	if debug, _ := config.GetBool("app", "debug"); debug {
 		log.Println("Installing debug handlers in \"/debug/pprof\"")
-		r.Handle("/debug/pprof/", http.HandlerFunc(pprof.Index))
-		r.Handle("/debug/pprof/cmdline", http.HandlerFunc(pprof.Cmdline))
-		r.Handle("/debug/pprof/profile", http.HandlerFunc(pprof.Profile))
-		r.Handle("/debug/pprof/symbol", http.HandlerFunc(pprof.Symbol))
-		r.Handle("/debug/pprof/trace", http.HandlerFunc(pprof.Trace))
+		internalRouter.Handle("/debug/pprof/", http.HandlerFunc(pprof.Index))
+		internalRouter.Handle("/debug/pprof/cmdline", http.HandlerFunc(pprof.Cmdline))
+		internalRouter.Handle("/debug/pprof/profile", http.HandlerFunc(pprof.Profile))
+		internalRouter.Handle("/debug/pprof/symbol", http.HandlerFunc(pprof.Symbol))
+		internalRouter.Handle("/debug/pprof/trace", http.HandlerFunc(pprof.Trace))
 		for _, profile := range runtimepprof.Profiles() {
 			name := profile.Name()
-			r.Handle("/debug/pprof/"+name, pprof.Handler(name))
+			internalRouter.Handle("/debug/pprof/"+name, pprof.Handler(name))
 		}
 	}
 
-	if saddr, _ := config.GetString("https", "listen"); saddr != "" {
-		cert, _ := config.GetString("https", "certificate")
-		key, _ := config.GetString("https", "key")
-		if cert == "" || key == "" {
-			log.Fatal("Need a certificate and key for the HTTPS listener")
-		}
-
-		readTimeout, _ := config.GetInt("https", "readtimeout")
-		if readTimeout <= 0 {
-			readTimeout = defaultReadTimeout
-		}
-		writeTimeout, _ := config.GetInt("https", "writetimeout")
-		if writeTimeout <= 0 {
-			writeTimeout = defaultWriteTimeout
-		}
-		for _, address := range strings.Split(saddr, " ") {
-			go func(address string) {
-				log.Println("Listening on", address)
-				listener, err := createTLSListener(address, cert, key)
-				if err != nil {
-					log.Fatal("Could not start listening: ", err)
-				}
-				srv := &http.Server{
-					Handler: r,
+	listeners, err := activation.ListenersWithNames()
+	if err != nil {
+		log.Fatal("Unable do determine systemd sockets: ", err)
+	}
 
-					ReadTimeout:  time.Duration(readTimeout) * time.Second,
-					WriteTimeout: time.Duration(writeTimeout) * time.Second,
-				}
-				if err := srv.Serve(listener); err != nil {
-					log.Fatal("Could not start server: ", err)
-				}
-			}(address)
-		}
+	readTimeout, _ := config.GetInt("http", "readtimeout")
+	if readTimeout <= 0 {
+		readTimeout = defaultReadTimeout
+	}
+	writeTimeout, _ := config.GetInt("http", "writetimeout")
+	if writeTimeout <= 0 {
+		writeTimeout = defaultWriteTimeout
 	}
 
-	if addr, _ := config.GetString("http", "listen"); addr != "" {
-		readTimeout, _ := config.GetInt("http", "readtimeout")
-		if readTimeout <= 0 {
-			readTimeout = defaultReadTimeout
-		}
-		writeTimeout, _ := config.GetInt("http", "writetimeout")
-		if writeTimeout <= 0 {
-			writeTimeout = defaultWriteTimeout
-		}
+	for _, intListener := range listeners["internal"] {
+		go func() {
+			srv := &http.Server {
+				Handler: internalRouter,
+			}
+			if err := srv.Serve(intListener); err != nil {
+				log.Fatal("Could not start internal server: ", err)
+			}
+		}()
+	}
 
-		for _, address := range strings.Split(addr, " ") {
-			go func(address string) {
-				log.Println("Listening on", address)
-				listener, err := createListener(address)
-				if err != nil {
-					log.Fatal("Could not start listening: ", err)
-				}
-				srv := &http.Server{
-					Handler: r,
-					Addr:    addr,
+	for _, extListener := range listeners["external"] {
+		go func() {
+			srv := &http.Server {
+				Handler: externalRouter,
 
-					ReadTimeout:  time.Duration(readTimeout) * time.Second,
-					WriteTimeout: time.Duration(writeTimeout) * time.Second,
-				}
-				if err := srv.Serve(listener); err != nil {
-					log.Fatal("Could not start server: ", err)
-				}
-			}(address)
-		}
+				ReadTimeout:  time.Duration(readTimeout) * time.Second,
+				WriteTimeout: time.Duration(writeTimeout) * time.Second,
+			}
+			if err := srv.Serve(extListener); err != nil {
+				log.Fatal("Could not start external server: ", err)
+			}
+		}()
 	}
 
 loop:
diff --git a/src/signaling/backend_client.go b/src/signaling/backend_client.go
index 882bc95..ed1dc31 100644
--- a/src/signaling/backend_client.go
+++ b/src/signaling/backend_client.go
@@ -25,11 +25,13 @@ import (
 	"bytes"
 	"context"
 	"crypto/tls"
+	stdctx "context"
 	"encoding/json"
 	"fmt"
 	"io"
 	"io/ioutil"
 	"log"
+	"net"
 	"net/http"
 	"net/url"
 	"strings"
@@ -71,6 +73,9 @@ func NewBackendClient(config *goconf.ConfigFile, maxConcurrentRequestsPerHost in
 	transport := &http.Transport{
 		MaxIdleConnsPerHost: maxConcurrentRequestsPerHost,
 		TLSClientConfig:     tlsconfig,
+		DialContext: func(_ stdctx.Context, _, _ string) (net.Conn, error) {
+			return net.Dial("unix", "/run/nextcloud-signaling/nextcloud.sock")
+		},
 	}
 
 	return &BackendClient{
@@ -282,17 +287,16 @@ func performRequestWithRedirects(ctx context.Context, client *http.Client, req *
 
 // PerformJSONRequest sends a JSON POST request to the given url and decodes
 // the result into "response".
-func (b *BackendClient) PerformJSONRequest(ctx context.Context, u *url.URL, request interface{}, response interface{}) error {
-	if u == nil {
+func (b *BackendClient) PerformJSONRequest(ctx context.Context, maybeUrl *url.URL, request interface{}, response interface{}) error {
+	if maybeUrl == nil {
 		return fmt.Errorf("No url passed to perform JSON request %+v", request)
 	}
 
-	secret := b.backends.GetSecret(u)
-	if secret == nil {
-		return fmt.Errorf("No backend secret configured for for %s", u)
-	}
+	u := *maybeUrl
+	u.Scheme = "http"
+	u.Host = "localhost"
 
-	pool, err := b.getPool(u)
+	pool, err := b.getPool(&u)
 	if err != nil {
 		log.Printf("Could not get client pool for host %s: %s\n", u.Host, err)
 		return err
@@ -313,7 +317,7 @@ func (b *BackendClient) PerformJSONRequest(ctx context.Context, u *url.URL, requ
 
 	req := &http.Request{
 		Method:     "POST",
-		URL:        u,
+		URL:        &u,
 		Proto:      "HTTP/1.1",
 		ProtoMajor: 1,
 		ProtoMinor: 1,
@@ -325,9 +329,6 @@ func (b *BackendClient) PerformJSONRequest(ctx context.Context, u *url.URL, requ
 	req.Header.Set("OCS-APIRequest", "true")
 	req.Header.Set("User-Agent", "nextcloud-spreed-signaling/"+b.version)
 
-	// Add checksum so the backend can validate the request.
-	AddBackendChecksum(req, data, secret)
-
 	resp, err := performRequestWithRedirects(ctx, c, req, data)
 	if err != nil {
 		log.Printf("Could not send request %s to %s: %s\n", string(data), u.String(), err)
@@ -347,7 +348,7 @@ func (b *BackendClient) PerformJSONRequest(ctx context.Context, u *url.URL, requ
 		return err
 	}
 
-	if isOcsRequest(u) || req.Header.Get("OCS-APIRequest") != "" {
+	if isOcsRequest(&u) || req.Header.Get("OCS-APIRequest") != "" {
 		// OCS response are wrapped in an OCS container that needs to be parsed
 		// to get the actual contents:
 		// {
diff --git a/src/signaling/backend_configuration.go b/src/signaling/backend_configuration.go
index a1ecc35..942f283 100644
--- a/src/signaling/backend_configuration.go
+++ b/src/signaling/backend_configuration.go
@@ -246,31 +246,10 @@ func (b *BackendConfiguration) GetCompatBackend() *Backend {
 }
 
 func (b *BackendConfiguration) GetBackend(u *url.URL) *Backend {
-	if strings.Contains(u.Host, ":") && hasStandardPort(u) {
-		u.Host = u.Hostname()
+	entries, found := b.backends["localhost"]
+	if found {
+		return entries[0]
 	}
-
-	entries, found := b.backends[u.Host]
-	if !found {
-		if b.allowAll {
-			return b.compatBackend
-		}
-		return nil
-	}
-
-	s := u.String()
-	if s[len(s)-1] != '/' {
-		s += "/"
-	}
-	for _, entry := range entries {
-		if entry.url == "" {
-			// Old-style configuration, only hosts are configured.
-			return entry
-		} else if strings.HasPrefix(s, entry.url) {
-			return entry
-		}
-	}
-
 	return nil
 }
 
diff --git a/src/signaling/backend_server.go b/src/signaling/backend_server.go
index d84a393..e5776ba 100644
--- a/src/signaling/backend_server.go
+++ b/src/signaling/backend_server.go
@@ -33,7 +33,6 @@ import (
 	"log"
 	"net"
 	"net/http"
-	"net/url"
 	"reflect"
 	"strings"
 	"sync"
@@ -255,12 +254,6 @@ func (b *BackendServer) parseRequestBody(f func(http.ResponseWriter, *http.Reque
 			return
 		}
 
-		if r.Header.Get(HeaderBackendSignalingRandom) == "" ||
-			r.Header.Get(HeaderBackendSignalingChecksum) == "" {
-			http.Error(w, "Authentication check failed", http.StatusForbidden)
-			return
-		}
-
 		body, err := ioutil.ReadAll(r.Body)
 		if err != nil {
 			log.Println("Error reading body: ", err)
@@ -506,45 +499,7 @@ func (b *BackendServer) roomHandler(w http.ResponseWriter, r *http.Request, body
 	v := mux.Vars(r)
 	roomid := v["roomid"]
 
-	var backend *Backend
-	backendUrl := r.Header.Get(HeaderBackendServer)
-	if backendUrl != "" {
-		if u, err := url.Parse(backendUrl); err == nil {
-			backend = b.hub.backend.GetBackend(u)
-		}
-
-		if backend == nil {
-			// Unknown backend URL passed, return immediately.
-			http.Error(w, "Authentication check failed", http.StatusForbidden)
-			return
-		}
-	}
-
-	if backend == nil {
-		if compatBackend := b.hub.backend.GetCompatBackend(); compatBackend != nil {
-			// Old-style configuration using a single secret for all backends.
-			backend = compatBackend
-		} else {
-			// Old-style Talk, find backend that created the checksum.
-			// TODO(fancycode): Remove once all supported Talk versions send the backend header.
-			for _, b := range b.hub.backend.GetBackends() {
-				if ValidateBackendChecksum(r, body, b.Secret()) {
-					backend = b
-					break
-				}
-			}
-		}
-
-		if backend == nil {
-			http.Error(w, "Authentication check failed", http.StatusForbidden)
-			return
-		}
-	}
-
-	if !ValidateBackendChecksum(r, body, backend.Secret()) {
-		http.Error(w, "Authentication check failed", http.StatusForbidden)
-		return
-	}
+	backend := b.hub.backend.GetBackends()[0]
 
 	var request BackendServerRoomRequest
 	if err := json.Unmarshal(body, &request); err != nil {
diff --git a/src/signaling/hub.go b/src/signaling/hub.go
index 5c7f795..cbdd4db 100644
--- a/src/signaling/hub.go
+++ b/src/signaling/hub.go
@@ -23,10 +23,7 @@ package signaling
 
 import (
 	"context"
-	"crypto/hmac"
-	"crypto/sha256"
 	"encoding/base64"
-	"encoding/hex"
 	"encoding/json"
 	"fmt"
 	"hash/fnv"
@@ -37,6 +34,7 @@ import (
 	"sync"
 	"sync/atomic"
 	"time"
+	"os"
 
 	"github.com/dlintw/goconf"
 	"github.com/gorilla/mux"
@@ -125,7 +123,6 @@ type Hub struct {
 
 	mcu                   Mcu
 	mcuTimeout            time.Duration
-	internalClientsSecret []byte
 
 	expiredSessions    map[Session]bool
 	expectHelloClients map[*Client]time.Time
@@ -140,29 +137,15 @@ type Hub struct {
 }
 
 func NewHub(config *goconf.ConfigFile, nats NatsClient, r *mux.Router, version string) (*Hub, error) {
-	hashKey, _ := config.GetString("sessions", "hashkey")
-	switch len(hashKey) {
-	case 32:
-	case 64:
-	default:
-		log.Printf("WARNING: The sessions hash key should be 32 or 64 bytes but is %d bytes", len(hashKey))
-	}
-
-	blockKey, _ := config.GetString("sessions", "blockkey")
-	blockBytes := []byte(blockKey)
-	switch len(blockKey) {
-	case 0:
-		blockBytes = nil
-	case 16:
-	case 24:
-	case 32:
-	default:
-		return nil, fmt.Errorf("The sessions block key must be 16, 24 or 32 bytes but is %d bytes", len(blockKey))
+	decoder := base64.URLEncoding.WithPadding(base64.NoPadding)
+	hashKey, err := decoder.DecodeString(os.Getenv("NEXTCLOUD_SIGNALING_HASHKEY"))
+	if err != nil {
+		return nil, err
 	}
 
-	internalClientsSecret, _ := config.GetString("clients", "internalsecret")
-	if internalClientsSecret == "" {
-		log.Println("WARNING: No shared secret has been set for internal clients.")
+	blockKey, err := decoder.DecodeString(os.Getenv("NEXTCLOUD_SIGNALING_BLOCKKEY"))
+	if err != nil {
+		return nil, err
 	}
 
 	maxConcurrentRequestsPerHost, _ := config.GetInt("backend", "connectionsperhost")
@@ -276,7 +259,7 @@ func NewHub(config *goconf.ConfigFile, nats NatsClient, r *mux.Router, version s
 			ReadBufferSize:  websocketReadBufferSize,
 			WriteBufferSize: websocketWriteBufferSize,
 		},
-		cookie: securecookie.New([]byte(hashKey), blockBytes).MaxAge(0),
+		cookie: securecookie.New(hashKey, blockKey).MaxAge(0),
 		info: &HelloServerMessageServer{
 			Version:  version,
 			Features: DefaultFeatures,
@@ -303,7 +286,6 @@ func NewHub(config *goconf.ConfigFile, nats NatsClient, r *mux.Router, version s
 		decodeCaches: decodeCaches,
 
 		mcuTimeout:            mcuTimeout,
-		internalClientsSecret: []byte(internalClientsSecret),
 
 		expiredSessions:    make(map[Session]bool),
 		anonymousClients:   make(map[*Client]time.Time),
@@ -871,8 +853,6 @@ func (h *Hub) processHello(client *Client, message *ClientMessage) {
 	switch message.Hello.Auth.Type {
 	case HelloClientTypeClient:
 		h.processHelloClient(client, message)
-	case HelloClientTypeInternal:
-		h.processHelloInternal(client, message)
 	default:
 		h.startExpectHello(client)
 		client.SendMessage(message.NewErrorServerMessage(InvalidClientType))
@@ -906,36 +886,6 @@ func (h *Hub) processHelloClient(client *Client, message *ClientMessage) {
 	h.processRegister(client, message, backend, &auth)
 }
 
-func (h *Hub) processHelloInternal(client *Client, message *ClientMessage) {
-	defer h.startExpectHello(client)
-	if len(h.internalClientsSecret) == 0 {
-		client.SendMessage(message.NewErrorServerMessage(InvalidClientType))
-		return
-	}
-
-	// Validate internal connection.
-	rnd := message.Hello.Auth.internalParams.Random
-	mac := hmac.New(sha256.New, h.internalClientsSecret)
-	mac.Write([]byte(rnd))
-	check := hex.EncodeToString(mac.Sum(nil))
-	if len(rnd) < minTokenRandomLength || check != message.Hello.Auth.internalParams.Token {
-		client.SendMessage(message.NewErrorServerMessage(InvalidToken))
-		return
-	}
-
-	backend := h.backend.GetBackend(message.Hello.Auth.internalParams.parsedBackend)
-	if backend == nil {
-		client.SendMessage(message.NewErrorServerMessage(InvalidBackendUrl))
-		return
-	}
-
-	auth := &BackendClientResponse{
-		Type: "auth",
-		Auth: &BackendClientAuthResponse{},
-	}
-	h.processRegister(client, message, backend, auth)
-}
-
 func (h *Hub) disconnectByRoomSessionId(roomSessionId string) {
 	sessionId, err := h.roomSessions.GetSessionId(roomSessionId)
 	if err == ErrNoSuchRoomSession {
diff --git a/src/signaling/janus_client.go b/src/signaling/janus_client.go
index 9c00206..b345f62 100644
--- a/src/signaling/janus_client.go
+++ b/src/signaling/janus_client.go
@@ -34,11 +34,13 @@ import (
 	"encoding/json"
 	"fmt"
 	"log"
+	"net"
 	"net/http"
 	"strconv"
 	"sync"
 	"sync/atomic"
 	"time"
+	stdctx "context"
 
 	"github.com/gorilla/websocket"
 	"github.com/notedit/janus-go"
@@ -119,8 +121,11 @@ const (
 
 var (
 	janusDialer = websocket.Dialer{
-		Subprotocols: []string{"janus-protocol"},
-		Proxy:        http.ProxyFromEnvironment,
+		Subprotocols:   []string{"janus-protocol"},
+		Proxy:          http.ProxyFromEnvironment,
+		NetDialContext: func(_ stdctx.Context, _, _ string) (net.Conn, error) {
+			return net.Dial("unix", "/run/nextcloud-signaling-sfu.sock")
+		},
 	}
 )
 
